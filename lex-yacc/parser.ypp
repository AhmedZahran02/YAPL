%{ 
    #include <iostream>
    #include <string>

    #include "branching.hpp"
    #include "common.hpp"
    #include "expression.hpp"
    #include "loop.hpp"
    #include "program.hpp"
    #include "scoping.hpp"
    #include "var-op.hpp"
    #include "functions.hpp"
    #include "controllers.hpp"
    #include "returnNode.hpp"
    #include "organizer.hpp"

    #include "parser.tab.hpp"
    extern int yylex();
    extern FILE *yyin;   
    void yyerror(const char* s) {
        std::cerr << "Error: " << s << std::endl;
    }
    CompilerState CompilerOrganizer::state = VALIDATING;
    std::vector<ErrorDetail> CompilerOrganizer::errors;
    std::vector<SymbolTableEntry> CompilerOrganizer::symbolTable;

    int lineNumber = 1;
    int scopeDepth = 0;
%}

%union  {
    ProgramNode*    Node;
    Expression*     Exp;
    FunctionParametersNode* FP;
    FunctionCallParametersNode* FCP;
    SwitchBody* SB;
    DataType* DT;

    struct {
        int line;
        char* str;
    } data;
}

%token <data> IF ELSE FOR WHILE DO SWITCH CASE DEFAULT CONTINUE BREAK RETURN PRINT DATA_TYPE
%token <data>  IDENTIFIER INTEGER BOOLEAN FLOAT CONST 
%token <data> STRING POW SQRT SHL SHR AND OR GTE LTE LT GT ISEQUAL NOTEQUAL 
%token <data> CHARACTER INCREMENT DECREMENT PLUS_EQUAL MINUS_EQUAL DIV_EQUAL MOD_EQUAL AND_EQUAL OR_EQUAL 
%token <data> XOR_EQUAL MUL_EQUAL SCOPE_BEGIN SCOPE_END

%type <Node>   ForSentence WhileSentence DoWhileSentence FunctionDefinition Case
%type <Node>   IFSentence VariableAssignment VariableDeclaration SwitchSentence
%type <Node>   PrintSentence Scope Sentence Sentences ReturnSentence ForPostSentence

%type <Exp>  Operand MathOperand MathOperation Operation Condition
%type <Exp>  StringOperation StringOperand FunctionCall

%type <FP>  FunctionParams 
%type <FCP> FunctionCallParams
%type <SB>  SwitchBody
%type <DT>  Type

%left ','
%right '='
%left '|'           
%left '^'           
%left '&'          
%left ISEQUAL NOTEQUAL
%left LT GT LTE GTE
%left SHL SHR
%left '+' '-'
%left '*' '/' '%'
%left '(' ')'
%left '[' ']'
%right '!' OR AND
%right IF
%right ELSE
%left ';'
%left PRINT

%%

Program: Sentences  {
    ScopeNode* scopeNode = new ScopeNode(-1, $1);
    scopeNode->runSemanticChecker();

    if (CompilerOrganizer::getErrorCount() == 0) {
        CompilerOrganizer::startRunning();
        scopeNode->run();
        CompilerOrganizer::exitWithSuccess();
        CompilerOrganizer::dumpSymbolTable();
    } else {
        std::cout << "There Are " << CompilerOrganizer::getErrorCount()  << " Errors Found" << std::endl;
        CompilerOrganizer::dumpErrors();
        CompilerOrganizer::exitWithFailure();
    }

    delete scopeNode;
}

Sentences: 
      Sentence Sentences        { $$ = $1->setNext($2); }
   
    | Scope Sentences           { $$ = $1->setNext($2); } 

    |                           { $$ = nullptr; }

Scope:  SCOPE_BEGIN Sentences SCOPE_END       { $$ = new ScopeNode($1.line, $2); }    


Sentence: 
      VariableAssignment ';'    { $$ = $1; }
    | VariableDeclaration ';'   { $$ = $1; }   
    | FunctionDefinition        { $$ = $1; }
    | IFSentence                { $$ = $1; }   
    | ForSentence               { $$ = $1; }
    | WhileSentence             { $$ = $1; }
    | DoWhileSentence           { $$ = $1; }
    | PrintSentence             { $$ = $1; }
    | ReturnSentence            { $$ = $1; }
    | SwitchSentence            { $$ = $1; }
    | CONTINUE ';'              { $$ = new ContinueNode($1.line);}       
    | BREAK ';'                 { $$ = new BreakNode($1.line);}


VariableAssignment: 
      IDENTIFIER '=' Operation    { $$ = new AssignNode($1.line, $1.str, $3); }        

    | Operation {
        $$ = new AssignNode(lineNumber, "", $1);
    } 
    
    | IDENTIFIER PLUS_EQUAL Operation    { 
        Expression* id = new IdentifierContainer($1.str);
        Expression* exp = new Expression(id, $3, OP_ADD);
        $$ = new AssignNode($1.line, $1.str, exp); 
    }

    | IDENTIFIER MINUS_EQUAL Operation    { 
        Expression* id = new IdentifierContainer($1.str);
        Expression* exp = new Expression(id, $3, OP_SUB);
        $$ = new AssignNode($1.line, $1.str, exp); 
    }

    | IDENTIFIER MUL_EQUAL Operation    { 
        Expression* id = new IdentifierContainer($1.str);
        Expression* exp = new Expression(id, $3, OP_MUL);
        $$ = new AssignNode($1.line, $1.str, exp); 
    }

    | IDENTIFIER DIV_EQUAL Operation    { 
        Expression* id = new IdentifierContainer($1.str);
        Expression* exp = new Expression(id, $3, OP_DIV);
        $$ = new AssignNode($1.line, $1.str, exp); 
    }

    | IDENTIFIER MOD_EQUAL Operation    { 
        Expression* id = new IdentifierContainer($1.str);
        Expression* exp = new Expression(id, $3, OP_MOD);
        $$ = new AssignNode($1.line, $1.str, exp); 
    }

    | IDENTIFIER AND_EQUAL Operation    { 
        Expression* id = new IdentifierContainer($1.str);
        Expression* exp = new Expression(id, $3, OP_AND);
        $$ = new AssignNode($1.line, $1.str, exp); 
    }

    | IDENTIFIER OR_EQUAL Operation    { 
        Expression* id = new IdentifierContainer($1.str);
        Expression* exp = new Expression(id, $3, OP_OR);
        $$ = new AssignNode($1.line, $1.str, exp); 
    }

    | IDENTIFIER XOR_EQUAL Operation    { 
        Expression* id = new IdentifierContainer($1.str);
        Expression* exp = new Expression(id, $3, OP_XOR);
        $$ = new AssignNode($1.line, $1.str, exp); 
    }



SwitchSentence:  
      SWITCH '(' IDENTIFIER ')' SCOPE_BEGIN SwitchBody SCOPE_END { $$ = new SwitchNode($1.line, $3.str, $6); }
    | SWITCH '(' IDENTIFIER ')' SCOPE_BEGIN SCOPE_END            { $$ = new SwitchNode($1.line, $3.str, nullptr); }

SwitchBody:
      Case Sentences                { 
        $$ = new SwitchBody(dynamic_cast<CaseNode*>($1)->assignBody($2)); 
    }
    | SwitchBody Case Sentences     { 
        $$ = dynamic_cast<SwitchBody*>($1)->addCase(dynamic_cast<CaseNode*>($2)->assignBody($3)); 
    }

Case: 
      CASE Operand ':'              { $$ = new CaseNode($1.line, $2); }
    | DEFAULT ':'                   { $$ = new CaseNode($1.line);};

ReturnSentence:
      RETURN Operation ';'            { $$ = new ReturnNode($1.line, $2);};
    | RETURN ';'                      { $$ = new ReturnNode($1.line); }

PrintSentence:  
    PRINT '(' Operation ')' ';'     { $$ = new PrintNode($1.line, $3);  }

IFSentence:
      IF '(' Condition ')' Scope   { $$ = new IfNode($1.line, $3, $5);   }
    | IFSentence ELSE IFSentence   { $$ = dynamic_cast<IfNode*>($1)->setElse($3);  }
    | IFSentence ELSE Scope        { $$ = dynamic_cast<IfNode*>($1)->setElse($3);  }

ForSentence: FOR '(' VariableDeclaration ';' Condition ';' ForPostSentence ')' Scope {
    $$ = new ForNode($1.line, dynamic_cast<DefineNode*>($3), $5, dynamic_cast<AssignNode*>($7), dynamic_cast<ScopeNode*>($9));
}

ForPostSentence:
      VariableAssignment                         { $$ = $1;  }
    | ForPostSentence ',' VariableAssignment     { $$ = dynamic_cast<AssignNode*>($1)->setNextAssignment($3); };

WhileSentence: WHILE '(' Condition ')' Scope {
    $$ = new WhileNode($1.line, $3, dynamic_cast<ScopeNode*>($5));
}

DoWhileSentence: DO Scope WHILE '(' Condition ')' ';' {
    $$ = new DoWhileNode($1.line, $5, dynamic_cast<ScopeNode*>($2));
}

FunctionDefinition: 
      Type IDENTIFIER '(' FunctionParams ')' Scope { 
        $$ = new FunctionDefintionNode($2.line, $1, $2.str, $4, dynamic_cast<ScopeNode*>($6)); 
    }

    | Type IDENTIFIER '(' ')' Scope                { 
        $$ = new FunctionDefintionNode($2.line, $1, $2.str, nullptr, dynamic_cast<ScopeNode*>($5)); 
    }  

FunctionParams: 
      FunctionParams ',' Type IDENTIFIER                { $$ = $1->addParameter($3, $4.str);}
    | Type IDENTIFIER                                   { $$ = new FunctionParametersNode($1, $2.str);}

VariableDeclaration: 
      Type IDENTIFIER                                   { $$ = new DefineNode($2.line, $1, $2.str, nullptr); }
    | Type IDENTIFIER '=' Operation                     { $$ = new DefineNode($2.line, $1, $2.str, $4); }
    | VariableDeclaration ',' IDENTIFIER                { $$ = dynamic_cast<DefineNode*>($1)->setNextDefine( new DefineNode($3.line, $3.str, nullptr) ); }
    | VariableDeclaration ',' IDENTIFIER '=' Operation  { $$ = dynamic_cast<DefineNode*>($1)->setNextDefine( new DefineNode($3.line, $3.str, $5) ); }

Condition:
        Condition     OR       Condition              { $$ = new Expression($1, $3, OP_OR);  }
    |   Condition     AND      Condition              { $$ = new Expression($1, $3, OP_AND); } 
    |   '!' Condition                                 { $$ = new Expression($2, $2, OP_NOT); }

    |     MathOperation GTE      MathOperation          { $$ = new Expression($1, $3, OP_GE);  } 
    |     MathOperation GT       MathOperation          { $$ = new Expression($1, $3, OP_GT);  } 
    |     MathOperation LTE      MathOperation          { $$ = new Expression($1, $3, OP_LE);  } 
    |     MathOperation LT       MathOperation          { $$ = new Expression($1, $3, OP_LT);  } 
    |     MathOperation ISEQUAL  MathOperation          { $$ = new Expression($1, $3, OP_EQ);  } 
    |     MathOperation NOTEQUAL MathOperation          { $$ = new Expression($1, $3, OP_NEQ); } 

    |    StringOperation GTE      StringOperation          { $$ = new StringContainer($1, $3, OP_GE);   }
    |    StringOperation GT       StringOperation          { $$ = new StringContainer($1, $3, OP_GT);   }
    |    StringOperation LTE      StringOperation          { $$ = new StringContainer($1, $3, OP_LE);   }
    |    StringOperation LT       StringOperation          { $$ = new StringContainer($1, $3, OP_LT);   }
    |    StringOperation ISEQUAL  StringOperation          { $$ = new StringContainer($1, $3, OP_EQ);   }
    |    StringOperation NOTEQUAL StringOperation          { $$ = new StringContainer($1, $3, OP_NEQ);  }

    |   MathOperation                               { $$ = $1; }
    |   StringOperation                             { $$ = $1; }

Operation: 
      MathOperation                                 { $$ = $1; }     
    | StringOperation                               { $$ = $1; }   
    | FunctionCall                                  { $$ = $1; }
    
FunctionCall:
        IDENTIFIER '(' FunctionCallParams ')'       { $$ = new FunctionCallNode( $1.line, $1.str, $3 ); }
    |   IDENTIFIER '(' ')'                          { $$ = new FunctionCallNode( $1.line, $1.str, nullptr ); }

FunctionCallParams:
        FunctionCallParams ',' Operation            { $$ = $1->addParameter($3); }
    |   Operation                                   { $$ = new FunctionCallParametersNode($1); }

MathOperation:
        MathOperation '+' MathOperation             { $$ = new Expression($1, $3, OP_ADD); }
    |   MathOperation '-' MathOperation             { $$ = new Expression($1, $3, OP_SUB); }  
    |   MathOperation '*' MathOperation             { $$ = new Expression($1, $3, OP_MUL); } 
    |   MathOperation '/' MathOperation             { $$ = new Expression($1, $3, OP_DIV); }    
    |   MathOperation '%' MathOperation             { $$ = new Expression($1, $3, OP_MOD); }     
    |   '(' MathOperation ')' MathOperation         { $$ = new Expression($2, $4, OP_MUL); } 
    |   '(' MathOperation ')'                       {                   $$ = $2;               }
    |   POW '(' MathOperation ',' MathOperation ')' { $$ = new Expression($3, $5, OP_POW);  }
    |   SQRT '(' MathOperation ')'                  { $$ = new Expression($3, $3, OP_SQRT); }
    |   MathOperation SHL MathOperation             { $$ = new Expression($1, $3, OP_SHL); } 
    |   MathOperation SHR MathOperation             { $$ = new Expression($1, $3, OP_SHR); } 
    |   MathOperation '|' MathOperation             { $$ = new Expression($1, $3, OP_BW_OR); }
    |   MathOperation '&' MathOperation             { $$ = new Expression($1, $3, OP_BW_AND); }
    |   MathOperation '^' MathOperation             { $$ = new Expression($1, $3, OP_XOR); }
    |   IDENTIFIER INCREMENT                          { $$ = new IdentifierContainer($1.str, OP_POST_ADD); }
    |   INCREMENT IDENTIFIER                          { $$ = new IdentifierContainer($2.str, OP_PRE_ADD); }
    |   DECREMENT IDENTIFIER                          { $$ = new IdentifierContainer($2.str, OP_PRE_SUB); }
    |   IDENTIFIER DECREMENT                          { $$ = new IdentifierContainer($1.str, OP_POST_ADD); }
    |   MathOperand                    

StringOperation:
        StringOperation '+' StringOperation             { $$ =  new StringContainer($1, $3, OP_ADD); } 
    |   StringOperation '+' MathOperation               { $$ =  new StringContainer($1, $3, OP_ADD); } 
    |   StringOperation '-' MathOperation               { $$ =  new StringContainer($1, $3, OP_SUB); }    
    |   '(' StringOperation ')'                         { $$ =  $2; } 
    |   StringOperation SHL StringOperation             { $$ =  new StringContainer($1, $3, OP_SHL); } 
    |   StringOperation SHR StringOperation             { $$ =  new StringContainer($1, $3, OP_SHR); } 
    |   StringOperand   

Operand: MathOperand | StringOperand;

MathOperand:
          INTEGER       { $$ = new Expression($1.str, DataType::Int());}

        | FLOAT         { $$ = new Expression($1.str, DataType::Float());}

        | CHARACTER     { $$ = new Expression($1.str, DataType::Char());}

        | BOOLEAN       { $$ = new Expression($1.str, DataType::Bool());}

        | IDENTIFIER    { $$ = new IdentifierContainer($1.str); }
    
StringOperand: STRING   { $$ = new StringContainer($1.str); }

Type:
      CONST DATA_TYPE   { $$ = new DataType($2.str, true);}
    | DATA_TYPE         { $$ = new DataType($1.str, false);}

%%


int main() {
    ScopeNode* x = new ScopeNode(-1);
    yyin = fopen("test.yapl", "r");
    yyparse();
    return 0;
}