%{ 
    #include <iostream>
    #include <string>

    #include "program.hpp"
    #include "identifier.hpp"
    #include "node.hpp"
    #include "if.hpp"
    #include "for.hpp"

    #include "parser.tab.hpp"
    extern int yylex();
    extern FILE *yyin;   
    void yyerror(const char* s) {
        std::cerr << "Error: " << s << std::endl;
    }
%}

%union  {
    ProgramNode*    PNode;
    ScopeNode*      SCNode;
    ExpressionNode* MNode;
    StringNode*     SNode;
    IfNode*         FNode;
    VariableDefinitionNode* VDNode;
    VariableAssignmentNode* VANode;
    ForNode*        FrNode;
    int INum;
    float FNum;
    char character;
    char* str;
}


%token <str> IDENTIFIER STRING POW SQRT SHL SHR DATA_TYPE IF ELSE WHILE FOR AND OR GTE LTE LT GT ISEQUAL NOTEQUAL FUNCTIONDEF DO
%token <str> CHARACTER
%token <str> INTEGER BOOLEAN
%token <str> FLOAT

%type <FrNode> ForSentence
%type <VANode> VariableAssignment
%type <VDNode> VariableDeclaration
%type <FNode>  IFSentence
%type <PNode>  Sentence Sentences 
%type <SCNode> Scope
%type <MNode>  MathOperand MathOperation Operation Condition
%type <SNode>  StringOperation StringOperand 


%left ';'
%right ISEQUAL NOTEQUAL
%left '|'
%left '^'
%left '&'
%left SHL SHR
%left LT GT LTE GTE
%left '+' '-'
%left '*' '/' '%'
%right '['
%left ']'
%left ')'
%right '('
%right IF
%right ELSE

%start Program

%%

Program: Sentences  {
    ScopeNode* scopeNode = new ScopeNode($1);
    scopeNode->run();
}


Sentences: 
      Sentence Sentences        { $$ = $1->setNext($2); }
   
    | Scope Sentences           { $$ = $1->setNext($2); } 

    |                           { $$ = nullptr; }

Scope:  '{' Sentences '}'       { $$ = new ScopeNode($2); }    

Sentence: 
      VariableAssignment        { $$ = $1; }
    | VariableDeclaration       { $$ = $1; }   
    | FunctionDefinition        { $$ = new ScopeNode(); }
    | IFSentence                { $$ = $1; }   
    | ForSentence               { $$ = $1; }
    | WhileSentence             { $$ = new ScopeNode(); }
    | DoWhileSentence           { $$ = new ScopeNode(); }

IFSentence:
      IF '(' Condition ')' Scope   { $$ = new IfNode($3, $5);   }
    | IFSentence ELSE IFSentence   { $$ = $1->setElse($3);  }
    | IFSentence ELSE Scope        { $$ = $1->setElse($3);  }

ForSentence: FOR '(' VariableDeclaration Condition ';' VariableAssignment ')' Scope {
    $$ = new ForNode($3, $4, $6, $8);
}

WhileSentence: WHILE '(' Condition ')' Scope

DoWhileSentence: DO Scope WHILE '(' Condition ')' ';'

FunctionDefinition: FUNCTIONDEF IDENTIFIER '(' FunctionParams ')' Scope

FunctionParams: DATA_TYPE IDENTIFIER ',' FunctionParams | ;

VariableDeclaration: 
      DATA_TYPE IDENTIFIER ';'                      { $$ = new VariableDefinitionNode($1, $2, nullptr); }
    | DATA_TYPE IDENTIFIER '=' Operation ';'        { $$ = new VariableDefinitionNode($1, $2, $4); }

VariableAssignment: IDENTIFIER '=' Operation ';'    { $$ = new VariableAssignmentNode($1, $3); }        

Condition:
        MathOperation OR MathOperation              { $$ = new ExpressionNode($1, $3, OP_OR);  }
    |   MathOperation AND MathOperation             { $$ = new ExpressionNode($1, $3, OP_AND); } 
    |   MathOperation GTE MathOperation             { $$ = new ExpressionNode($1, $3, OP_GE);  } 
    |   MathOperation GT MathOperation              { $$ = new ExpressionNode($1, $3, OP_GT);  } 
    |   MathOperation LTE MathOperation             { $$ = new ExpressionNode($1, $3, OP_LE);  } 
    |   MathOperation LT MathOperation              { $$ = new ExpressionNode($1, $3, OP_LT);  } 
    |   MathOperation ISEQUAL MathOperation         { $$ = new ExpressionNode($1, $3, OP_EQ);  } 
    |   MathOperation NOTEQUAL MathOperation        { $$ = new ExpressionNode($1, $3, OP_NEQ); } 

    |   StringOperation GTE StringOperation         { $$ = new StringNode($1, $3, OP_GE);   }
    |   StringOperation GT StringOperation          { $$ = new StringNode($1, $3, OP_GT);   }
    |   StringOperation LTE StringOperation         { $$ = new StringNode($1, $3, OP_LE);   }
    |   StringOperation LT StringOperation          { $$ = new StringNode($1, $3, OP_LT);   }
    |   StringOperation ISEQUAL StringOperation     { $$ = new StringNode($1, $3, OP_EQ);   }
    |   StringOperation NOTEQUAL StringOperation    { $$ = new StringNode($1, $3, OP_NEQ);  }

    |   MathOperation                               { $$ = $1; }
    |   StringOperation                             { $$ = $1; }

Operation: 
      MathOperation                                 { $$ = $1; /*std::cout << $1->getValue() << std::endl;*/ }     
    | StringOperation                               { $$ = $1; /*std::cout << $1->getValue() << std::endl;*/ }   

MathOperation:
        MathOperation '+' MathOperation             { $$ = new ExpressionNode($1, $3, OP_ADD); }
    |   MathOperation '-' MathOperation             { $$ = new ExpressionNode($1, $3, OP_SUB); }  
    |   MathOperation '*' MathOperation             { $$ = new ExpressionNode($1, $3, OP_MUL); } 
    |   MathOperation '/' MathOperation             { $$ = new ExpressionNode($1, $3, OP_DIV); }    
    |   MathOperation '%' MathOperation             { $$ = new ExpressionNode($1, $3, OP_MOD); }     
    |   '(' MathOperation ')' MathOperation         { $$ = new ExpressionNode($2, $4, OP_MUL); } 
    |   '(' MathOperation ')'                       {                   $$ = $2;               }
    |   POW '(' MathOperation ',' MathOperation ')' { $$ = new ExpressionNode($3, $5, OP_POW);  }
    |   SQRT '(' MathOperation ')'                  { $$ = new ExpressionNode($3, $3, OP_SQRT); }
    |   MathOperation SHL MathOperation             { $$ = new ExpressionNode($1, $3, OP_SHL); } 
    |   MathOperation SHR MathOperation             { $$ = new ExpressionNode($1, $3, OP_SHR); } 
    |   MathOperation '|' MathOperation             { $$ = new ExpressionNode($1, $3, OP_OR); }
    |   MathOperation '&' MathOperation             { $$ = new ExpressionNode($1, $3, OP_AND); }
    |   MathOperation '^' MathOperation             { $$ = new ExpressionNode($1, $3, OP_XOR); }
    |   MathOperand                    

StringOperation:
        StringOperation '+' StringOperation             { $$ =  new StringNode($1, $3, OP_ADD); } 
    |   StringOperation '+' MathOperation               { $$ =  new StringNode($1, $3, OP_ADD); } 
    |   StringOperation '-' MathOperation               { $$ =  new StringNode($1, $3, OP_SUB); }    
    |   '(' StringOperation ')'                         { $$ =  $2; } 
    /* |   StringOperand '[' INTEGER ':' INTEGER ']'    { $$ =  new StringNode($1, $3, OP_SHR); }  */
    |   StringOperation SHL StringOperation                 { $$ =  new StringNode($1, $3, OP_SHL); } 
    |   StringOperation SHR StringOperation                 { $$ =  new StringNode($1, $3, OP_SHR); } 
    |   StringOperand   

MathOperand:
          INTEGER       { $$ = new ExpressionNode($1, TINT);}

        | FLOAT         { $$ = new ExpressionNode($1, TFLOAT);}

        | CHARACTER     { $$ = new ExpressionNode($1, TCHAR);}

        | BOOLEAN       { $$ = new ExpressionNode($1, TBOOLEAN);}

        | IDENTIFIER    { $$ = new IdentifierNode($1); }
    
StringOperand: STRING   { $$ = new StringNode($1); }

%%


int main() {
    ScopeNode* x = new ScopeNode();
    yyin = fopen("test.yapl", "r");
    yyparse();
    return 0;
}